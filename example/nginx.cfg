init_by_lua_block {
	ngx.shared.vars:set('HOSTNAME', os.getenv('HOSTNAME'))
}

lua_package_path '/usr/share/lua/5.1/?.lua;;';

init_worker_by_lua_block {
	-- Set global variable:
	graphite = require 'graphite' {
		ip = "127.0.0.1";
		port = 2003;
		prefix = string.format("storage.%s.", ngx.shared.vars:get('HOSTNAME'):gsub('%.', '_')),
		log  = ngx.log,
	}
}

log_by_lua_block {
	if not ngx.req.is_internal() then
		local method = ngx.req.get_method()
		local status = ngx.status
		local wasted = ngx.now() - ngx.req.start_time()
		local uri    = ngx.var.uri
		local pair   = uri:match("/([^/]+)")

		graphite:send(string.format("res.%s.%s.%s", pair, method, status), wasted)
		if method == 'GET' then
			local h, err = ngx.resp.get_headers()
			if type(h) ~= 'table' then
				ngx.log(ngx.ERR, err)
			else
				graphite:send(string.format("tx.%s.%s", pair, method), h['content-length'])
			end
		elseif method == 'POST' or method == 'PUT' then
			graphite:send(string.format("rx.%s.%s", pair, method), ngx.header['content-length'])
		end

		ngx.log(ngx.ERR, string.format("method = %s; status = %s; wasted = %s; uri = %s; pair = %s", method, status, wasted, uri, pair))
	end
}
